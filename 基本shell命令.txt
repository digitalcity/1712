pwd 显示当前位置

ls  查看当前目录下所有文件    -a 可查看隐藏文件  -A

cd （相对路径） 跳转目录   cd ../ 返回上一目录

touch 文件名(加上扩展名)  新建文件

mkdir 创建文件夹

cat 文件名  查看文件内的内容

rm 文件名  删除文件     -r 可删除文件夹   -f强制删除

cp 文件名 目录  复制该文件到某个目录下   -r 可复制文件夹
cp css/* css1/ -r 将css内的所有文件和文件夹 复制到css1下

mv 文件名或文件夹名 目录  移动文件或文件夹到目录下

～ 代表用户主目录
/ 代表用户根目录
./ 代表当前目录
cd d: 跳转到d盘 


git 基本命令 
在linux上安装 git 在终端输入  sudo apt-get install git

windows上安装 git bash
git clone 地址(https/ssh)     克隆网上的仓库到本地

git status 查看当前仓库的文件状态

git add 文件名 或 .(所有的修改)  将你的修改 让git记录

git commit -m'版本留言' 将你做的git add 的修改做成一个版本 版本留言必须写 而且要真实

git push 将本地的版本提交到远端 网上



添加 ssh  相当于系统和 git 关联
ssh 作用:你如果使用的是 ssh 地址克隆的仓库 git push 的时候不用输入用户名密码

ssh-keygen 生成秘钥 默认存储到用户主目录下
cat ~/.ssh/id_rsa.pub
复制密码 到github网站 点击头像  settings  SSH 添加


git init 初始化本地文件夹为 git 仓库
git add .
git commit -m'版本留言'
git push 因为是首次提交 所以不清楚远端仓库地址 
需要使用 (git remote add origin 地址)  在本地添加一个远端仓库地址
然后 使用 (git push -u origin master) 提交到远端的你添加的仓库


git pull 将远端优先于本地的版本拉取到本地 让远端和本地同步 然后再次做本地的提交

注意**** 如果远端的更新和本地要提交的修改 发生冲突 git pull 会失败 需要在冲突的文件下手动解决冲突 手动解决冲突相当于 再次修改 所以需要 git add 等再次提交****

git log --pretty=oneline
查看版本历史 每个版本在一行显示

历史回滚
git reset --hard HEAD^
git reset --hard [版本号]
本地仓库 回退到上一个版本或与版本号对应的版本
git push -f
强制将本地的版本推送到远端 覆盖远端版本

git reflog 查看git记录过得所有历史版本


分支操作 
git branch [分支名]  新建分支
git branch  查看本地分支
git branch -a  查看所有分支
git branch -r  查看远端分支
git checkout [分支名] 切换分支
git branch -d [分支名] 删除本地分支

删除远端分支(zzt)并提交到远端
git branch -d -r origin/zzt 删除
git push origin :zzt 提交

git checkout -b [分支名]
新建分支并切换
主分支上有的的内容  在新建分支的时候也会有同样的内容

在本地新建分支之后 远端没有分支 需要下面命令才能推送到新建的分支上
git push -u origin dev

git merge [分支名] 当前所在分支合并其他分支
git merge之后 本地仓库已经合并分支的修改了 需要 使用 git push 提交到远端

当你在自己的分支想要查看主分支上其他同事提交需要执行下面代码 拉取主分支上的更新 可以使用git push 推送到远端
git pull origin master

gh-pages

github用户名.github.io 仓库 直接访问仓库名就可以访问index.html

若想要其他仓库达到同样的效果 需要使用gh-pages分支

别的仓库如何访问  创建一个 gh-pages 分支 把需要展示的页面 放到 gh-pages 分下 然后提交 
之后 访问地址 github用户名.github.io/别的仓库名

ctrl + c 结束当前命令

linux 系统如何安装 nodejs
1.安装 curl    sudo apt-get install curl
2.安装 nvm(node 版本管理) curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash 
3.使用 nvm 安装 node  nvm install v8.11.1


npm init 初始化你的项目为 npm 的项目 使用 npm 管理自己的项目依赖  会生成一个 package.json 

npm install jquery --save 使用 npm 安装非工具类依赖
npm install webpack --save-dev 使用 npm 安装工具类依赖 --save-dev 可以换成 -D

npm i 会将 package.json 里面记录的所有项目依赖全部安装，并且版本完全一致